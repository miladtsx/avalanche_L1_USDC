{"version":3,"file":"static/js/93109.5d8ac5b6.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/auth/core/create-login-message.ts","../node_modules/thirdweb/src/auth/core/sign-login-payload.ts","../node_modules/thirdweb/src/rpc/actions/eth_sendRawTransaction.ts","../node_modules/thirdweb/src/utils/random.ts","../node_modules/thirdweb/src/wallets/in-app/core/authentication/passkeys.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/actions/get-enclave-user-status.ts","../node_modules/thirdweb/src/wallets/in-app/core/wallet/enclave-wallet.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/actions/sign-transaction.enclave.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/actions/sign-message.enclave.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/actions/sign-typed-data.enclave.ts","../node_modules/thirdweb/src/wallets/in-app/web/utils/iFrameCommunication/IframeCommunicator.ts","../node_modules/thirdweb/src/wallets/in-app/web/utils/iFrameCommunication/InAppWalletIframeCommunicator.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/auth/abstract-login.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/auth/base-login.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/auth/iframe-auth.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/actions/generate-wallet.enclave.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/auth/otp.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/iframe-wallet.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/web-connector.ts","../node_modules/thirdweb/src/wallets/in-app/core/authentication/guest.ts","../node_modules/thirdweb/src/wallets/in-app/core/authentication/siwe.ts","../node_modules/thirdweb/src/wallets/in-app/core/authentication/linkAccount.ts"],"sourcesContent":["import type { LoginPayload } from \"./types.js\";\n\n/**\n * Create an EIP-4361 & CAIP-122 compliant message to sign based on the login payload\n * @param payload - The login payload containing the necessary information.\n * @returns The generated login message.\n * @internal\n */\nexport function createLoginMessage(payload: LoginPayload): string {\n  const typeField = \"Ethereum\";\n  const header = `${payload.domain} wants you to sign in with your ${typeField} account:`;\n  let prefix = [header, payload.address].join(\"\\n\");\n  prefix = [prefix, payload.statement].join(\"\\n\\n\");\n  if (payload.statement) {\n    prefix += \"\\n\";\n  }\n\n  const suffixArray = [];\n  if (payload.uri) {\n    const uriField = `URI: ${payload.uri}`;\n    suffixArray.push(uriField);\n  }\n\n  const versionField = `Version: ${payload.version}`;\n  suffixArray.push(versionField);\n\n  if (payload.chain_id) {\n    const chainField = `Chain ID: ${payload.chain_id}` || \"1\";\n    suffixArray.push(chainField);\n  }\n\n  const nonceField = `Nonce: ${payload.nonce}`;\n  suffixArray.push(nonceField);\n\n  const issuedAtField = `Issued At: ${payload.issued_at}`;\n  suffixArray.push(issuedAtField);\n\n  const expiryField = `Expiration Time: ${payload.expiration_time}`;\n  suffixArray.push(expiryField);\n\n  if (payload.invalid_before) {\n    const invalidBeforeField = `Not Before: ${payload.invalid_before}`;\n    suffixArray.push(invalidBeforeField);\n  }\n\n  if (payload.resources) {\n    suffixArray.push(\n      [\"Resources:\", ...payload.resources.map((x) => `- ${x}`)].join(\"\\n\"),\n    );\n  }\n\n  const suffix = suffixArray.join(\"\\n\");\n  return [prefix, suffix].join(\"\\n\");\n}\n","import type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport { createLoginMessage } from \"./create-login-message.js\";\nimport type { LoginPayload } from \"./types.js\";\n\n/**\n * @auth\n */\nexport type SignLoginPayloadParams = {\n  payload: LoginPayload;\n  account: Account;\n};\n\n/**\n * Signs the login payload using the provided account.\n * @param options - The options for signing the login payload.\n * @returns An object containing the signature and the payload.\n * @example\n * ```ts\n * import { signLoginPayload } from 'thirdweb/auth';\n *\n * const { signature, payload } = await signLoginPayload({\n *  payload: loginPayload,\n *  account: account,\n * });\n * ```\n * @auth\n */\nexport async function signLoginPayload(options: SignLoginPayloadParams) {\n  const { payload, account } = options;\n  const signature = await account.signMessage({\n    message: createLoginMessage(payload),\n  });\n  return {\n    signature,\n    payload,\n  };\n}\n","import type { EIP1193RequestFn, EIP1474Methods, Hex } from \"viem\";\n\n/**\n * Sends a raw transaction to the Ethereum network.\n * @param request - The EIP1193 request function.\n * @param signedTransaction - The signed transaction in hex format.\n * @returns A promise that resolves to the transaction hash.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_sendRawTransaction } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const transactionHash = await eth_sendRawTransaction(rpcRequest, \"0x...\");\n * ```\n */\nexport async function eth_sendRawTransaction(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  signedTransaction: Hex,\n) {\n  return await request({\n    method: \"eth_sendRawTransaction\",\n    params: [signedTransaction],\n  });\n}\n","import { uint8ArrayToHex } from \"./encoding/hex.js\";\n\n/**\n * @internal\n */\nexport function randomBytesHex(length = 32) {\n  return uint8ArrayToHex(randomBytesBuffer(length));\n}\n\n/**\n * @internal\n */\nexport function randomBytesBuffer(length = 32) {\n  return globalThis.crypto.getRandomValues(new Uint8Array(length));\n}\n","import type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\nimport type { Ecosystem } from \"../wallet/types.js\";\nimport type { ClientScopedStorage } from \"./client-scoped-storage.js\";\nimport type { AuthStoredTokenWithCookieReturnType } from \"./types.js\";\n\nfunction getVerificationPath() {\n  return `${getThirdwebBaseUrl(\n    \"inAppWallet\",\n  )}/api/2024-05-05/login/passkey/callback`;\n}\nfunction getChallengePath(type: \"sign-in\" | \"sign-up\", username?: string) {\n  return `${getThirdwebBaseUrl(\n    \"inAppWallet\",\n  )}/api/2024-05-05/login/passkey?type=${type}${\n    username ? `&username=${username}` : \"\"\n  }`;\n}\n\nexport type RegisterResult = {\n  authenticatorData: string;\n  credentialId: string;\n  clientData: string;\n  credential: {\n    publicKey: string;\n    algorithm: string;\n  };\n  origin: string;\n};\n\nexport type AuthenticateResult = {\n  credentialId: string;\n  authenticatorData: string;\n  clientData: string;\n  signature: string;\n  origin: string;\n};\n\nexport type RpInfo = { name: string; id: string };\n\nexport interface PasskeyClient {\n  register: (args: {\n    name: string;\n    challenge: string;\n    rp: RpInfo;\n  }) => Promise<RegisterResult>;\n  authenticate: (args: {\n    credentialId: string | undefined;\n    challenge: string;\n    rp: RpInfo;\n  }) => Promise<AuthenticateResult>;\n  isAvailable: () => boolean;\n}\n\nexport async function registerPasskey(options: {\n  client: ThirdwebClient;\n  storage: ClientScopedStorage;\n  passkeyClient: PasskeyClient;\n  ecosystem?: Ecosystem;\n  username?: string;\n  rp: RpInfo;\n}): Promise<AuthStoredTokenWithCookieReturnType> {\n  if (!options.passkeyClient.isAvailable()) {\n    throw new Error(\"Passkeys are not available on this device\");\n  }\n  const fetchWithId = getClientFetch(options.client, options.ecosystem);\n  const generatedName = options.username ?? generateUsername(options.ecosystem);\n  // 1. request challenge from  server\n  const res = await fetchWithId(getChallengePath(\"sign-up\", generatedName));\n  const challengeData = await res.json();\n  if (!challengeData.challenge) {\n    throw new Error(\"No challenge received\");\n  }\n  const challenge = challengeData.challenge;\n\n  // 2. initiate registration\n  const registration = await options.passkeyClient.register({\n    name: generatedName,\n    challenge,\n    rp: options.rp,\n  });\n\n  const customHeaders: Record<string, string> = {};\n  if (options.ecosystem?.partnerId) {\n    customHeaders[\"x-ecosystem-partner-id\"] = options.ecosystem.partnerId;\n  }\n  if (options.ecosystem?.id) {\n    customHeaders[\"x-ecosystem-id\"] = options.ecosystem.id;\n  }\n\n  // 3. send the registration object to the server\n  const verifRes = await fetchWithId(getVerificationPath(), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...customHeaders,\n    },\n    body: JSON.stringify({\n      type: \"sign-up\",\n      authenticatorData: registration.authenticatorData,\n      credentialId: registration.credentialId,\n      serverVerificationId: challengeData.serverVerificationId,\n      clientData: registration.clientData,\n      username: generatedName,\n      credential: {\n        publicKey: registration.credential.publicKey,\n        algorithm: registration.credential.algorithm,\n      },\n      origin: registration.origin,\n      rpId: options.rp.id,\n    }),\n  });\n  const verifData = await verifRes.json();\n\n  if (!verifData || !verifData.storedToken) {\n    throw new Error(\n      `Error verifying passkey: ${verifData.message ?? \"unknown error\"}`,\n    );\n  }\n  // 4. store the credentialId in local storage\n  await options.storage.savePasskeyCredentialId(registration.credentialId);\n\n  // 5. returns back the IAW authentication token\n  return verifData;\n}\n\nexport async function loginWithPasskey(options: {\n  client: ThirdwebClient;\n  storage: ClientScopedStorage;\n  passkeyClient: PasskeyClient;\n  rp: RpInfo;\n  ecosystem?: Ecosystem;\n}): Promise<AuthStoredTokenWithCookieReturnType> {\n  if (!options.passkeyClient.isAvailable()) {\n    throw new Error(\"Passkeys are not available on this device\");\n  }\n  const fetchWithId = getClientFetch(options.client, options.ecosystem);\n  // 1. request challenge from  server/iframe\n  const res = await fetchWithId(getChallengePath(\"sign-in\"));\n  const challengeData = await res.json();\n  if (!challengeData.challenge) {\n    throw new Error(\"No challenge received\");\n  }\n  const challenge = challengeData.challenge;\n  // 1.2. find the user's credentialId in local storage\n  const credentialId =\n    (await options.storage.getPasskeyCredentialId()) ?? undefined;\n  // 2. initiate login\n  const authentication = await options.passkeyClient.authenticate({\n    credentialId,\n    challenge,\n    rp: options.rp,\n  });\n\n  const customHeaders: Record<string, string> = {};\n  if (options.ecosystem?.partnerId) {\n    customHeaders[\"x-ecosystem-partner-id\"] = options.ecosystem.partnerId;\n  }\n  if (options.ecosystem?.id) {\n    customHeaders[\"x-ecosystem-id\"] = options.ecosystem.id;\n  }\n\n  const verifRes = await fetchWithId(getVerificationPath(), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...customHeaders,\n    },\n    body: JSON.stringify({\n      type: \"sign-in\",\n      authenticatorData: authentication.authenticatorData,\n      credentialId: authentication.credentialId,\n      serverVerificationId: challengeData.serverVerificationId,\n      clientData: authentication.clientData,\n      signature: authentication.signature,\n      origin: authentication.origin,\n      rpId: options.rp.id,\n    }),\n  });\n\n  const verifData = await verifRes.json();\n\n  if (!verifData || !verifData.storedToken) {\n    throw new Error(\n      `Error verifying passkey: ${verifData.message ?? \"unknown error\"}`,\n    );\n  }\n\n  // 5. store the credentialId in local storage\n  await options.storage.savePasskeyCredentialId(authentication.credentialId);\n\n  // 6. return the auth'd user type\n  return verifData;\n}\n\nfunction generateUsername(ecosystem?: Ecosystem) {\n  return `${ecosystem?.id ?? \"wallet\"}-${new Date().toISOString()}`;\n}\n","import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../../utils/fetch.js\";\nimport type { UserStatus } from \"../../../core/wallet/enclave-wallet.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\n\n/**\n * Gets the user's status from the backend.\n *\n * @internal\n */\nexport async function getUserStatus({\n  authToken,\n  client,\n  ecosystem,\n}: {\n  authToken: string;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n}): Promise<UserStatus | undefined> {\n  const clientFetch = getClientFetch(client, ecosystem);\n  const response = await clientFetch(\n    `${getThirdwebBaseUrl(\"inAppWallet\")}/api/2024-05-05/accounts`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-thirdweb-client-id\": client.clientId,\n        Authorization: `Bearer embedded-wallet-token:${authToken}`,\n      },\n    },\n  );\n\n  if (!response.ok) {\n    console.log(\"response\", response.status);\n    if (response.status === 401) {\n      // 401 response indicates there is no user logged in, so we return undefined\n      return undefined;\n    }\n    const result = await response.json();\n    console.log(\"result\", result);\n    throw new Error(`Failed to get user status: ${result.error}`);\n  }\n\n  return (await response.json()) as UserStatus;\n}\n","import { bytesToHex } from \"viem\";\nimport { getCachedChain } from \"../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { eth_sendRawTransaction } from \"../../../../rpc/actions/eth_sendRawTransaction.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\nimport { getAddress } from \"../../../../utils/address.js\";\nimport { type Hex, toHex } from \"../../../../utils/encoding/hex.js\";\nimport { parseTypedData } from \"../../../../utils/signatures/helpers/parseTypedData.js\";\nimport type { Prettify } from \"../../../../utils/type-utils.js\";\nimport type {\n  Account,\n  SendTransactionOption,\n} from \"../../../interfaces/wallet.js\";\nimport { getUserStatus } from \"../../web/lib/actions/get-enclave-user-status.js\";\nimport { signMessage as signEnclaveMessage } from \"../../web/lib/actions/sign-message.enclave.js\";\nimport { signTransaction as signEnclaveTransaction } from \"../../web/lib/actions/sign-transaction.enclave.js\";\nimport { signTypedData as signEnclaveTypedData } from \"../../web/lib/actions/sign-typed-data.enclave.js\";\nimport type { ClientScopedStorage } from \"../authentication/client-scoped-storage.js\";\nimport type {\n  AuthDetails,\n  AuthResultAndRecoveryCode,\n  GetUser,\n} from \"../authentication/types.js\";\nimport type { Ecosystem } from \"./types.js\";\nimport type { IWebWallet } from \"./web-wallet.js\";\n\nexport type UserStatus = {\n  linkedAccounts: {\n    type: string;\n    details:\n      | { email: string; [key: string]: string }\n      | { phone: string; [key: string]: string }\n      | { address: string; [key: string]: string }\n      | { id: string; [key: string]: string };\n  }[];\n  wallets:\n    | [\n        {\n          address: string;\n          createdAt: string;\n          type: \"sharded\" | \"enclave\";\n        },\n      ]\n    | [];\n  id: string;\n};\n\nexport class EnclaveWallet implements IWebWallet {\n  private client: ThirdwebClient;\n  private ecosystem?: Ecosystem;\n  private address: string;\n  private localStorage: ClientScopedStorage;\n\n  constructor({\n    client,\n    ecosystem,\n    address,\n    storage,\n  }: Prettify<{\n    client: ThirdwebClient;\n    ecosystem?: Ecosystem;\n    address: string;\n    storage: ClientScopedStorage;\n  }>) {\n    this.client = client;\n    this.ecosystem = ecosystem;\n    this.address = address;\n    this.localStorage = storage;\n  }\n\n  /**\n   * Store the auth token for use\n   * @returns `{walletAddress: string }` The user's wallet details\n   * @internal\n   */\n  async postWalletSetUp(authResult: AuthResultAndRecoveryCode): Promise<void> {\n    await this.localStorage.saveAuthCookie(authResult.storedToken.cookieString);\n  }\n\n  /**\n   * Gets the current user's details\n   * @internal\n   */\n  async getUserWalletStatus(): Promise<GetUser> {\n    const token = await this.localStorage.getAuthCookie();\n    if (!token) {\n      return { status: \"Logged Out\" };\n    }\n\n    const userStatus = await getUserStatus({\n      authToken: token,\n      client: this.client,\n      ecosystem: this.ecosystem,\n    });\n\n    if (!userStatus) {\n      return { status: \"Logged Out\" };\n    }\n    const wallet = userStatus.wallets[0];\n\n    const authDetails: AuthDetails = {\n      email: userStatus.linkedAccounts.find(\n        (account) => account.details.email !== undefined,\n      )?.details.email,\n      phoneNumber: userStatus.linkedAccounts.find(\n        (account) => account.details.phone !== undefined,\n      )?.details.phone,\n      userWalletId: userStatus.id || \"\",\n      recoveryShareManagement: \"ENCLAVE\",\n    };\n\n    if (!wallet) {\n      return {\n        status: \"Logged In, Wallet Uninitialized\",\n        authDetails,\n      };\n    }\n\n    return {\n      status: \"Logged In, Wallet Initialized\",\n      walletAddress: wallet.address,\n      authDetails,\n      account: await this.getAccount(),\n    };\n  }\n\n  /**\n   * Returns an account to perform wallet operations\n   * @internal\n   */\n  async getAccount(): Promise<Account> {\n    const client = this.client;\n    const ecosystem = this.ecosystem;\n    const storage = this.localStorage;\n\n    const _signTransaction = async (tx: SendTransactionOption) => {\n      const rpcRequest = getRpcClient({\n        client,\n        chain: getCachedChain(tx.chainId),\n      });\n      const transaction: Record<string, Hex | number | undefined> = {\n        to: (tx.to as Hex) ?? undefined,\n        data: tx.data ? toHex(tx.data) : undefined,\n        value: tx.value ? toHex(tx.value) : undefined,\n        gas: tx.gas ? toHex(tx.gas + tx.gas / BigInt(10)) : undefined, // Add a 10% buffer to gas\n        nonce: tx.nonce\n          ? toHex(tx.nonce)\n          : toHex(\n              await import(\n                \"../../../../rpc/actions/eth_getTransactionCount.js\"\n              ).then(({ eth_getTransactionCount }) =>\n                eth_getTransactionCount(rpcRequest, {\n                  address: this.address,\n                  blockTag: \"pending\",\n                }),\n              ),\n            ),\n        chainId: toHex(tx.chainId),\n      };\n\n      if (tx.maxFeePerGas) {\n        transaction.maxFeePerGas = toHex(tx.maxFeePerGas);\n        transaction.maxPriorityFeePerGas = tx.maxPriorityFeePerGas\n          ? toHex(tx.maxPriorityFeePerGas)\n          : undefined;\n        transaction.type = 2;\n      } else {\n        transaction.gasPrice = tx.gasPrice ? toHex(tx.gasPrice) : undefined;\n        transaction.type = 0;\n      }\n\n      return signEnclaveTransaction({\n        client,\n        ecosystem,\n        storage,\n        payload: transaction,\n      });\n    };\n    return {\n      address: getAddress(this.address),\n      async signTransaction(tx) {\n        if (!tx.chainId) {\n          throw new Error(\"chainId required in tx to sign\");\n        }\n\n        return _signTransaction({\n          chainId: tx.chainId,\n          ...tx,\n        });\n      },\n      async sendTransaction(tx) {\n        const rpcRequest = getRpcClient({\n          client,\n          chain: getCachedChain(tx.chainId),\n        });\n        const signedTx = await _signTransaction(tx);\n        const transactionHash = await eth_sendRawTransaction(\n          rpcRequest,\n          signedTx,\n        );\n        return {\n          transactionHash,\n        };\n      },\n      async signMessage({ message }) {\n        const messagePayload = (() => {\n          if (typeof message === \"string\") {\n            return { message, isRaw: false };\n          }\n          return {\n            message:\n              typeof message.raw === \"string\"\n                ? message.raw\n                : bytesToHex(message.raw),\n            isRaw: true,\n          };\n        })();\n\n        const { signature } = await signEnclaveMessage({\n          client,\n          ecosystem,\n          payload: messagePayload,\n          storage,\n        });\n        return signature as Hex;\n      },\n      async signTypedData(_typedData) {\n        const parsedTypedData = parseTypedData(_typedData);\n        const { signature } = await signEnclaveTypedData({\n          client,\n          ecosystem,\n          payload: parsedTypedData,\n          storage,\n        });\n\n        return signature as Hex;\n      },\n    };\n  }\n}\n","import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { getClientFetch } from \"../../../../../utils/fetch.js\";\nimport { stringify } from \"../../../../../utils/json.js\";\nimport type { ClientScopedStorage } from \"../../../core/authentication/client-scoped-storage.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\n\nexport async function signTransaction({\n  client,\n  ecosystem,\n  payload,\n  storage,\n}: {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  payload: Record<string, Hex | number | undefined>;\n  storage: ClientScopedStorage;\n}) {\n  console.log(\"payload\", payload);\n  const clientFetch = getClientFetch(client, ecosystem);\n  const authToken = await storage.getAuthCookie();\n\n  const response = await clientFetch(\n    `${getThirdwebBaseUrl(\"inAppWallet\")}/api/v1/enclave-wallet/sign-transaction`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-thirdweb-client-id\": client.clientId,\n        Authorization: `Bearer embedded-wallet-token:${authToken}`,\n      },\n      body: stringify({\n        transactionPayload: payload,\n      }),\n    },\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Failed to sign transaction\");\n  }\n\n  const signedTransaction = (await response.json()) as {\n    r: string;\n    s: string;\n    v: number;\n    signature: string;\n    hash: string;\n  };\n  return signedTransaction.signature as Hex;\n}\n","import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../../utils/fetch.js\";\nimport { stringify } from \"../../../../../utils/json.js\";\nimport type { ClientScopedStorage } from \"../../../core/authentication/client-scoped-storage.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\n\nexport async function signMessage({\n  client,\n  ecosystem,\n  payload: { message, isRaw },\n  storage,\n}: {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  payload: {\n    message: string;\n    isRaw: boolean;\n  };\n  storage: ClientScopedStorage;\n}) {\n  const clientFetch = getClientFetch(client, ecosystem);\n  const authToken = await storage.getAuthCookie();\n\n  const response = await clientFetch(\n    `${getThirdwebBaseUrl(\"inAppWallet\")}/api/v1/enclave-wallet/sign-message`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-thirdweb-client-id\": client.clientId,\n        Authorization: `Bearer embedded-wallet-token:${authToken}`,\n      },\n      body: stringify({\n        messagePayload: {\n          message,\n          isRaw,\n        },\n      }),\n    },\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Failed to sign message\");\n  }\n\n  const signedMessage = (await response.json()) as {\n    r: string;\n    s: string;\n    v: number;\n    signature: string;\n    hash: string;\n  };\n  return signedMessage;\n}\n","import type { TypedData } from \"abitype\";\nimport type { TypedDataDefinition } from \"viem\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../../utils/fetch.js\";\nimport { stringify } from \"../../../../../utils/json.js\";\nimport type { ClientScopedStorage } from \"../../../core/authentication/client-scoped-storage.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\n\nexport async function signTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | \"EIP712Domain\" = keyof typedData,\n>({\n  client,\n  ecosystem,\n  payload,\n  storage,\n}: {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  payload: TypedDataDefinition<typedData, primaryType>;\n  storage: ClientScopedStorage;\n}) {\n  const clientFetch = getClientFetch(client, ecosystem);\n  const authToken = await storage.getAuthCookie();\n\n  const response = await clientFetch(\n    `${getThirdwebBaseUrl(\"inAppWallet\")}/api/v1/enclave-wallet/sign-typed-data`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-thirdweb-client-id\": client.clientId,\n        Authorization: `Bearer embedded-wallet-token:${authToken}`,\n      },\n      body: stringify({\n        ...payload,\n      }),\n    },\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Failed to sign typed data\");\n  }\n\n  const signedTypedData = (await response.json()) as {\n    r: string;\n    s: string;\n    v: number;\n    signature: string;\n    hash: string;\n  };\n  return signedTypedData;\n}\n","type IFrameCommunicatorProps = {\n  link: string;\n  baseUrl: string;\n  iframeId: string;\n  container?: HTMLElement;\n  onIframeInitialize?: () => void;\n};\n\nfunction sleep(seconds: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\n\nconst iframeBaseStyle = {\n  height: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  backgroundColor: \"transparent\",\n  colorScheme: \"light\",\n  position: \"fixed\",\n  top: \"0px\",\n  right: \"0px\",\n  zIndex: \"2147483646\",\n  display: \"none\",\n  pointerEvents: \"all\",\n};\n\n// Global var to help track iframe state\nconst isIframeLoaded = new Map<string, boolean>();\n\n/**\n * @internal\n */\n// biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\nexport class IframeCommunicator<T extends { [key: string]: any }> {\n  private iframe: HTMLIFrameElement;\n  private POLLING_INTERVAL_SECONDS = 1.4;\n\n  private iframeBaseUrl;\n  /**\n   * @internal\n   */\n  constructor({\n    link,\n    baseUrl,\n    iframeId,\n    container = document.body,\n    onIframeInitialize,\n  }: IFrameCommunicatorProps) {\n    this.iframeBaseUrl = baseUrl;\n\n    // Creating the IFrame element for communication\n    let iframe = document.getElementById(iframeId) as HTMLIFrameElement | null;\n    const hrefLink = new URL(link);\n\n    // TODO (ew) - bring back version tracking\n    // const sdkVersion = process.env.THIRDWEB_EWS_SDK_VERSION;\n    // if (!sdkVersion) {\n    //   throw new Error(\"Missing THIRDWEB_EWS_SDK_VERSION env var\");\n    // }\n    // hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\n    if (!iframe || iframe.src !== hrefLink.href) {\n      // ! Do not update the hrefLink here or it'll cause multiple re-renders\n\n      iframe = document.createElement(\"iframe\");\n      const mergedIframeStyles = {\n        ...iframeBaseStyle,\n      };\n      Object.assign(iframe.style, mergedIframeStyles);\n      iframe.setAttribute(\"id\", iframeId);\n      iframe.setAttribute(\"fetchpriority\", \"high\");\n      container.appendChild(iframe);\n\n      iframe.src = hrefLink.href;\n\n      // iframe.setAttribute(\"data-version\", sdkVersion);\n      // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n      const onIframeLoaded = (event: MessageEvent<any>) => {\n        if (event.data.eventType === \"ewsIframeLoaded\") {\n          window.removeEventListener(\"message\", onIframeLoaded);\n          if (!iframe) {\n            console.warn(\"thirdweb iFrame not found\");\n            return;\n          }\n          this.onIframeLoadHandler(iframe, onIframeInitialize)();\n        }\n      };\n      window.addEventListener(\"message\", onIframeLoaded);\n    }\n    this.iframe = iframe;\n  }\n\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n  protected async onIframeLoadedInitVariables(): Promise<Record<string, any>> {\n    return {};\n  }\n\n  /**\n   * @internal\n   */\n  onIframeLoadHandler(\n    iframe: HTMLIFrameElement,\n    onIframeInitialize?: () => void,\n  ) {\n    return async () => {\n      const channel = new MessageChannel();\n\n      const promise = new Promise((res, rej) => {\n        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n        channel.port1.onmessage = (event: any) => {\n          const { data } = event;\n          channel.port1.close();\n          if (!data.success) {\n            rej(new Error(data.error));\n          }\n          isIframeLoaded.set(iframe.src, true);\n          if (onIframeInitialize) {\n            onIframeInitialize();\n          }\n          res(true);\n        };\n      });\n\n      const INIT_IFRAME_EVENT = \"initIframe\";\n      iframe?.contentWindow?.postMessage(\n        // ? We initialise the iframe with a bunch\n        // of useful information so that we don't have to pass it\n        // through in each of the future call. This would be where we do it.\n        {\n          eventType: INIT_IFRAME_EVENT,\n          data: await this.onIframeLoadedInitVariables(),\n        },\n        this.iframeBaseUrl,\n        [channel.port2],\n      );\n\n      await promise;\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async call<ReturnData>({\n    procedureName,\n    params,\n    showIframe = false,\n  }: {\n    procedureName: keyof T;\n    params: T[keyof T];\n    showIframe?: boolean;\n  }) {\n    while (!isIframeLoaded.get(this.iframe.src)) {\n      await sleep(this.POLLING_INTERVAL_SECONDS);\n    }\n    if (showIframe) {\n      this.iframe.style.display = \"block\";\n      // magic number to let the display render before performing the animation of the modal in\n      await sleep(0.005);\n    }\n\n    const channel = new MessageChannel();\n    const promise = new Promise<ReturnData>((res, rej) => {\n      // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n      channel.port1.onmessage = async (event: any) => {\n        const { data } = event;\n        channel.port1.close();\n        if (showIframe) {\n          // magic number to let modal fade out before hiding it\n          await sleep(0.1);\n          this.iframe.style.display = \"none\";\n        }\n        if (!data.success) {\n          rej(new Error(data.error));\n        } else {\n          res(data.data);\n        }\n      };\n    });\n\n    this.iframe.contentWindow?.postMessage(\n      { eventType: procedureName, data: params },\n      this.iframeBaseUrl,\n      [channel.port2],\n    );\n    return promise;\n  }\n\n  /**\n   * This has to be called by any iframe that will be removed from the DOM.\n   * Use to make sure that we reset the global loaded state of the particular iframe.src\n   * @internal\n   */\n  destroy() {\n    isIframeLoaded.delete(this.iframe.src);\n  }\n}\n","import { webLocalStorage } from \"../../../../../utils/storage/webStorage.js\";\nimport { ClientScopedStorage } from \"../../../core/authentication/client-scoped-storage.js\";\nimport { IN_APP_WALLET_PATH } from \"../../../core/constants/settings.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\nimport { IframeCommunicator } from \"./IframeCommunicator.js\";\n\n/**\n * @internal\n */\nexport class InAppWalletIframeCommunicator<\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  T extends { [key: string]: any },\n> extends IframeCommunicator<T> {\n  clientId: string;\n  ecosystem?: Ecosystem;\n  /**\n   * @internal\n   */\n  constructor({\n    clientId,\n    baseUrl,\n    ecosystem,\n  }: {\n    clientId: string;\n    baseUrl: string;\n    ecosystem?: Ecosystem;\n  }) {\n    super({\n      iframeId: IN_APP_WALLET_IFRAME_ID + (ecosystem?.id || \"\"),\n      link: createInAppWalletIframeLink({\n        clientId,\n        path: IN_APP_WALLET_PATH,\n        ecosystem,\n        baseUrl,\n      }).href,\n      baseUrl,\n      container: document.body,\n    });\n    this.clientId = clientId;\n    this.ecosystem = ecosystem;\n  }\n\n  /**\n   * @internal\n   */\n  override async onIframeLoadedInitVariables() {\n    const localStorage = new ClientScopedStorage({\n      storage: webLocalStorage,\n      clientId: this.clientId,\n      ecosystemId: this.ecosystem?.id,\n    });\n\n    return {\n      authCookie: await localStorage.getAuthCookie(),\n      deviceShareStored: await localStorage.getDeviceShare(),\n      walletUserId: await localStorage.getWalletUserId(),\n      clientId: this.clientId,\n      partnerId: this.ecosystem?.partnerId,\n      ecosystemId: this.ecosystem?.id,\n    };\n  }\n}\n\n// This is the URL and ID tag of the iFrame that we communicate with\n/**\n * @internal\n */\nfunction createInAppWalletIframeLink({\n  clientId,\n  baseUrl,\n  path,\n  ecosystem,\n  queryParams,\n}: {\n  clientId: string;\n  baseUrl: string;\n  path: string;\n  ecosystem?: Ecosystem;\n  queryParams?: { [key: string]: string | number };\n}) {\n  const inAppWalletUrl = new URL(`${path}`, baseUrl);\n  if (queryParams) {\n    for (const queryKey of Object.keys(queryParams)) {\n      inAppWalletUrl.searchParams.set(\n        queryKey,\n        queryParams[queryKey]?.toString() || \"\",\n      );\n    }\n  }\n  inAppWalletUrl.searchParams.set(\"clientId\", clientId);\n  if (ecosystem?.partnerId !== undefined) {\n    inAppWalletUrl.searchParams.set(\"partnerId\", ecosystem.partnerId);\n  }\n  if (ecosystem?.id !== undefined) {\n    inAppWalletUrl.searchParams.set(\"ecosystemId\", ecosystem.id);\n  }\n  return inAppWalletUrl;\n}\nconst IN_APP_WALLET_IFRAME_ID = \"thirdweb-in-app-wallet-iframe\";\n","import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n  AuthProvider,\n  SendEmailOtpReturnType,\n} from \"../../../core/authentication/types.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\nimport type { ClientIdWithQuerierType } from \"../../types.js\";\nimport type { InAppWalletIframeCommunicator } from \"../../utils/iFrameCommunication/InAppWalletIframeCommunicator.js\";\n\nexport type LoginQuerierTypes = {\n  loginWithCustomAuthEndpoint: { payload: string; encryptionKey: string };\n  loginWithCustomJwt: { jwt: string; encryptionKey?: string };\n  loginWithThirdwebModal: undefined | { email: string };\n  sendThirdwebSmsLoginOtp: { phoneNumber: string };\n  sendThirdwebEmailLoginOtp: { email: string };\n  verifyThirdwebEmailLoginOtp: {\n    email: string;\n    otp: string;\n    recoveryCode?: string;\n  };\n  verifyThirdwebSmsLoginOtp: {\n    phoneNumber: string;\n    otp: string;\n    recoveryCode?: string;\n  };\n  injectDeveloperClientId: undefined;\n  getHeadlessOauthLoginLink: { authProvider: AuthProvider };\n};\n\n/**\n * @internal\n */\nexport abstract class AbstractLogin<\n  MODAL = void,\n  EMAIL_MODAL extends { email: string } = { email: string },\n  EMAIL_VERIFICATION extends { email: string; otp: string } = {\n    email: string;\n    otp: string;\n    recoveryCode?: string;\n  },\n> {\n  protected LoginQuerier: InAppWalletIframeCommunicator<LoginQuerierTypes>;\n  protected preLogin;\n  protected postLogin: (\n    authResults: AuthAndWalletRpcReturnType,\n  ) => Promise<AuthLoginReturnType>;\n  protected client: ThirdwebClient;\n  protected baseUrl: string;\n  protected ecosystem?: Ecosystem;\n\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * @internal\n   */\n  constructor({\n    baseUrl,\n    querier,\n    preLogin,\n    postLogin,\n    client,\n    ecosystem,\n  }: ClientIdWithQuerierType & {\n    baseUrl: string;\n    preLogin: () => Promise<void>;\n    postLogin: (\n      authDetails: AuthAndWalletRpcReturnType,\n    ) => Promise<AuthLoginReturnType>;\n    ecosystem?: Ecosystem;\n  }) {\n    this.baseUrl = baseUrl;\n    this.LoginQuerier = querier;\n    this.preLogin = preLogin;\n    this.postLogin = postLogin;\n    this.client = client;\n    this.ecosystem = ecosystem;\n  }\n\n  abstract loginWithCustomJwt(args: {\n    jwt: string;\n    encryptionKey: string;\n  }): Promise<AuthLoginReturnType>;\n  abstract loginWithCustomAuthEndpoint(args: {\n    payload: string;\n    encryptionKey: string;\n  }): Promise<AuthLoginReturnType>;\n  abstract loginWithModal(args?: MODAL): Promise<AuthLoginReturnType>;\n  abstract loginWithIframe(args: EMAIL_MODAL): Promise<AuthLoginReturnType>;\n\n  /**\n   * @internal\n   */\n  async sendEmailLoginOtp({\n    email,\n  }: LoginQuerierTypes[\"sendThirdwebEmailLoginOtp\"]): Promise<SendEmailOtpReturnType> {\n    const result = await this.LoginQuerier.call<SendEmailOtpReturnType>({\n      procedureName: \"sendThirdwebEmailLoginOtp\",\n      params: { email },\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @internal\n   */\n  async sendSmsLoginOtp({\n    phoneNumber,\n  }: LoginQuerierTypes[\"sendThirdwebSmsLoginOtp\"]): Promise<SendEmailOtpReturnType> {\n    const result = await this.LoginQuerier.call<SendEmailOtpReturnType>({\n      procedureName: \"sendThirdwebSmsLoginOtp\",\n      params: { phoneNumber },\n    });\n    return result;\n  }\n\n  abstract loginWithEmailOtp(\n    args: EMAIL_VERIFICATION,\n  ): Promise<AuthLoginReturnType>;\n\n  abstract loginWithSmsOtp(args: {\n    phoneNumber: string;\n    otp: string;\n    recoveryCode?: string;\n  }): Promise<AuthLoginReturnType>;\n}\n","import type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n} from \"../../../core/authentication/types.js\";\nimport { AbstractLogin, type LoginQuerierTypes } from \"./abstract-login.js\";\n\n/**\n *\n */\nexport class BaseLogin extends AbstractLogin<\n  void,\n  { email: string },\n  { email: string; otp: string; recoveryCode?: string }\n> {\n  async authenticateWithModal(): Promise<AuthAndWalletRpcReturnType> {\n    return this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithThirdwebModal\",\n      params: undefined,\n      showIframe: true,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  override async loginWithModal(): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.authenticateWithModal();\n    return this.postLogin(result);\n  }\n\n  async authenticateWithIframe({\n    email,\n  }: {\n    email: string;\n  }): Promise<AuthAndWalletRpcReturnType> {\n    return this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithThirdwebModal\",\n      params: { email },\n      showIframe: true,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  override async loginWithIframe({\n    email,\n  }: {\n    email: string;\n  }): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.authenticateWithIframe({ email });\n    return this.postLogin(result);\n  }\n\n  async authenticateWithCustomJwt({\n    encryptionKey,\n    jwt,\n  }: LoginQuerierTypes[\"loginWithCustomJwt\"]): Promise<AuthAndWalletRpcReturnType> {\n    if (!encryptionKey || encryptionKey.length === 0) {\n      throw new Error(\"Encryption key is required for custom jwt auth\");\n    }\n\n    return this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithCustomJwt\",\n      params: { encryptionKey, jwt },\n    });\n  }\n\n  /**\n   * @internal\n   */\n  override async loginWithCustomJwt({\n    encryptionKey,\n    jwt,\n  }: LoginQuerierTypes[\"loginWithCustomJwt\"]): Promise<AuthLoginReturnType> {\n    if (!encryptionKey || encryptionKey.length === 0) {\n      throw new Error(\"Encryption key is required for custom jwt auth\");\n    }\n\n    await this.preLogin();\n    const result = await this.authenticateWithCustomJwt({ encryptionKey, jwt });\n    return this.postLogin(result);\n  }\n\n  async authenticateWithCustomAuthEndpoint({\n    encryptionKey,\n    payload,\n  }: LoginQuerierTypes[\"loginWithCustomAuthEndpoint\"]): Promise<AuthAndWalletRpcReturnType> {\n    return this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithCustomAuthEndpoint\",\n      params: { encryptionKey, payload },\n    });\n  }\n\n  /**\n   * @internal\n   */\n  override async loginWithCustomAuthEndpoint({\n    encryptionKey,\n    payload,\n  }: LoginQuerierTypes[\"loginWithCustomAuthEndpoint\"]): Promise<AuthLoginReturnType> {\n    if (!encryptionKey || encryptionKey.length === 0) {\n      throw new Error(\"Encryption key is required for custom auth\");\n    }\n\n    await this.preLogin();\n    const result = await this.authenticateWithCustomAuthEndpoint({\n      encryptionKey,\n      payload,\n    });\n    return this.postLogin(result);\n  }\n\n  async authenticateWithEmailOtp({\n    email,\n    otp,\n    recoveryCode,\n  }: LoginQuerierTypes[\"verifyThirdwebEmailLoginOtp\"]): Promise<AuthAndWalletRpcReturnType> {\n    return this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"verifyThirdwebEmailLoginOtp\",\n      params: { email, otp, recoveryCode },\n    });\n  }\n\n  /**\n   * @internal\n   */\n  override async loginWithEmailOtp({\n    email,\n    otp,\n    recoveryCode,\n  }: LoginQuerierTypes[\"verifyThirdwebEmailLoginOtp\"]): Promise<AuthLoginReturnType> {\n    const result = await this.authenticateWithEmailOtp({\n      email,\n      otp,\n      recoveryCode,\n    });\n    return this.postLogin(result);\n  }\n\n  async authenticateWithSmsOtp({\n    phoneNumber,\n    otp,\n    recoveryCode,\n  }: LoginQuerierTypes[\"verifyThirdwebSmsLoginOtp\"]): Promise<AuthAndWalletRpcReturnType> {\n    return this.LoginQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"verifyThirdwebSmsLoginOtp\",\n      params: { phoneNumber, otp, recoveryCode },\n    });\n  }\n\n  /**\n   * @internal\n   */\n  override async loginWithSmsOtp({\n    phoneNumber,\n    otp,\n    recoveryCode,\n  }: LoginQuerierTypes[\"verifyThirdwebSmsLoginOtp\"]): Promise<AuthLoginReturnType> {\n    const result = await this.authenticateWithSmsOtp({\n      phoneNumber,\n      otp,\n      recoveryCode,\n    });\n    return this.postLogin(result);\n  }\n}\n","import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport type { ClientScopedStorage } from \"../../../core/authentication/client-scoped-storage.js\";\nimport type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n  AuthStoredTokenWithCookieReturnType,\n  LogoutReturnType,\n  SendEmailOtpReturnType,\n} from \"../../../core/authentication/types.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\nimport type { ClientIdWithQuerierType } from \"../../types.js\";\nimport type { InAppWalletIframeCommunicator } from \"../../utils/iFrameCommunication/InAppWalletIframeCommunicator.js\";\nimport { generateWallet } from \"../actions/generate-wallet.enclave.js\";\nimport { getUserStatus } from \"../actions/get-enclave-user-status.js\";\nimport { BaseLogin } from \"./base-login.js\";\n\nexport type AuthQuerierTypes = {\n  logout: undefined;\n  initIframe: {\n    partnerId?: string;\n    ecosystemId?: string;\n    clientId: string;\n    authCookie: string;\n    walletUserId: string;\n    deviceShareStored: string | null;\n  };\n  loginWithStoredTokenDetails: {\n    storedToken: AuthStoredTokenWithCookieReturnType[\"storedToken\"];\n    recoveryCode?: string;\n  };\n  migrateFromShardToEnclave: {\n    storedToken: AuthStoredTokenWithCookieReturnType[\"storedToken\"];\n  };\n};\n\n/**\n *\n */\nexport class Auth {\n  protected client: ThirdwebClient;\n  protected ecosystem?: Ecosystem;\n  protected AuthQuerier: InAppWalletIframeCommunicator<AuthQuerierTypes>;\n  protected localStorage: ClientScopedStorage;\n  protected onAuthSuccess: (\n    authResults: AuthAndWalletRpcReturnType,\n  ) => Promise<AuthLoginReturnType>;\n  private BaseLogin: BaseLogin;\n\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * @internal\n   */\n  constructor({\n    client,\n    querier,\n    onAuthSuccess,\n    ecosystem,\n    baseUrl,\n    localStorage,\n  }: ClientIdWithQuerierType & {\n    baseUrl: string;\n    ecosystem?: Ecosystem;\n    onAuthSuccess: (\n      authDetails: AuthAndWalletRpcReturnType,\n    ) => Promise<AuthLoginReturnType>;\n    localStorage: ClientScopedStorage;\n  }) {\n    this.client = client;\n    this.ecosystem = ecosystem;\n\n    this.AuthQuerier = querier;\n    this.localStorage = localStorage;\n    this.onAuthSuccess = onAuthSuccess;\n    this.BaseLogin = new BaseLogin({\n      postLogin: async (result) => {\n        return this.postLogin(result);\n      },\n      preLogin: async () => {\n        await this.preLogin();\n      },\n      ecosystem,\n      querier: querier,\n      client,\n      baseUrl,\n    });\n  }\n\n  private async preLogin() {\n    await this.logout();\n  }\n\n  private async postLogin({\n    storedToken,\n    walletDetails,\n  }: AuthAndWalletRpcReturnType): Promise<AuthLoginReturnType> {\n    if (storedToken.shouldStoreCookieString) {\n      await this.localStorage.saveAuthCookie(storedToken.cookieString);\n    }\n    const initializedUser = await this.onAuthSuccess({\n      storedToken,\n      walletDetails,\n    });\n    return initializedUser;\n  }\n\n  async loginWithAuthToken(\n    authToken: AuthStoredTokenWithCookieReturnType,\n    recoveryCode?: string,\n  ): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n\n    const user = await getUserStatus({\n      authToken: authToken.storedToken.cookieString,\n      client: this.client,\n      ecosystem: this.ecosystem,\n    });\n    if (!user) {\n      throw new Error(\"Cannot login, no user found for auth token\");\n    }\n\n    // If they're already an enclave wallet, proceed to login\n    if (user.wallets.length > 0 && user.wallets[0]?.type === \"enclave\") {\n      return this.postLogin({\n        storedToken: authToken.storedToken,\n        walletDetails: {\n          walletAddress: user.wallets[0].address,\n        },\n      });\n    }\n\n    if (user.wallets.length === 0 && this.ecosystem) {\n      // If this is a new ecosystem wallet without an enclave yet, we'll generate an enclave\n      const result = await generateWallet({\n        authToken: authToken.storedToken.cookieString,\n        client: this.client,\n        ecosystem: this.ecosystem,\n      });\n      return this.postLogin({\n        storedToken: authToken.storedToken,\n        walletDetails: {\n          walletAddress: result.address,\n        },\n      });\n    }\n\n    // If this is an existing sharded wallet or in-app wallet, we'll login with the sharded wallet\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithStoredTokenDetails\",\n      params: {\n        storedToken: authToken.storedToken,\n        recoveryCode,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * Used to log the user into their thirdweb wallet on your platform via a myriad of auth providers\n   * @example\n   * ```typescript\n   * const thirdwebInAppWallet = new InAppWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\n   * try {\n   *   const user = await thirdwebInAppWallet.auth.loginWithModal();\n   *   // user is now logged in\n   * } catch (e) {\n   *   // User closed modal or something else went wrong during the authentication process\n   *   console.error(e)\n   * }\n   * ```\n   * @returns `{{user: InitializedUser}}` An InitializedUser object.\n   */\n  async loginWithModal(): Promise<AuthLoginReturnType> {\n    return this.BaseLogin.loginWithModal();\n  }\n  async authenticateWithModal(): Promise<AuthAndWalletRpcReturnType> {\n    return this.BaseLogin.authenticateWithModal();\n  }\n\n  /**\n   * Used to log the user into their thirdweb wallet using email OTP\n   * @example\n   * ```typescript\n   *  // Basic Flow\n   *  const thirdwebInAppWallet = new InAppWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    // prompts user to enter the code they received\n   *    const user = await thirdwebInAppWallet.auth.loginWithThirdwebEmailOtp({ email : \"you@example.com\" });\n   *    // user is now logged in\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   * ```\n   * @param args - args.email: We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link InAppWalletSdk.getUser} for more\n   */\n  async loginWithIframe(\n    args: Parameters<BaseLogin[\"loginWithIframe\"]>[0],\n  ): Promise<AuthLoginReturnType> {\n    return this.BaseLogin.loginWithIframe(args);\n  }\n  async authenticateWithIframe(\n    args: Parameters<BaseLogin[\"authenticateWithIframe\"]>[0],\n  ): Promise<AuthAndWalletRpcReturnType> {\n    return this.BaseLogin.authenticateWithIframe(args);\n  }\n\n  /**\n   * @internal\n   */\n  async loginWithCustomJwt(\n    args: Parameters<BaseLogin[\"loginWithCustomJwt\"]>[0],\n  ): Promise<AuthLoginReturnType> {\n    return this.BaseLogin.loginWithCustomJwt(args);\n  }\n  async authenticateWithCustomJwt(\n    args: Parameters<BaseLogin[\"authenticateWithCustomJwt\"]>[0],\n  ): Promise<AuthAndWalletRpcReturnType> {\n    return this.BaseLogin.authenticateWithCustomJwt(args);\n  }\n\n  /**\n   * @internal\n   */\n  async loginWithCustomAuthEndpoint(\n    args: Parameters<BaseLogin[\"loginWithCustomAuthEndpoint\"]>[0],\n  ): Promise<AuthLoginReturnType> {\n    return this.BaseLogin.loginWithCustomAuthEndpoint(args);\n  }\n  async authenticateWithCustomAuthEndpoint(\n    args: Parameters<BaseLogin[\"authenticateWithCustomAuthEndpoint\"]>[0],\n  ): Promise<AuthAndWalletRpcReturnType> {\n    return this.BaseLogin.authenticateWithCustomAuthEndpoint(args);\n  }\n\n  /**\n   * A headless way to send the users at the passed email an OTP code.\n   * You need to then call {@link Auth.loginWithEmailOtp} in order to complete the login process\n   * @example\n   * @param param0.email\n   * ```typescript\n   *  const thirdwebInAppWallet = new InAppWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  // sends user an OTP code\n   * try {\n   *    await thirdwebInAppWallet.auth.sendEmailLoginOtp({ email : \"you@example.com\" });\n   * } catch(e) {\n   *    // Error Sending user's email an OTP code\n   *    console.error(e);\n   * }\n   *\n   * // Then when your user is ready to verify their OTP\n   * try {\n   *    const user = await thirdwebInAppWallet.auth.verifyEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\" });\n   * } catch(e) {\n   *    // Error verifying the OTP code\n   *    console.error(e)\n   * }\n   * ```\n   * @param param0 - param0.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns `{{ isNewUser: boolean }}` IsNewUser indicates if the user is a new user to your platform\n   * @internal\n   */\n  async sendEmailLoginOtp({\n    email,\n  }: Parameters<\n    BaseLogin[\"sendEmailLoginOtp\"]\n  >[0]): Promise<SendEmailOtpReturnType> {\n    return this.BaseLogin.sendEmailLoginOtp({\n      email,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async sendSmsLoginOtp({\n    phoneNumber,\n  }: Parameters<\n    BaseLogin[\"sendSmsLoginOtp\"]\n  >[0]): Promise<SendEmailOtpReturnType> {\n    return this.BaseLogin.sendSmsLoginOtp({\n      phoneNumber,\n    });\n  }\n\n  /**\n   * Used to verify the otp that the user receives from thirdweb\n   *\n   * See {@link Auth.sendEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithThirdwebEmailOtp` with `verifyThirdwebEmailLoginOtp`\n   * @param args - props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * props.otp The code that the user received in their email\n   * @returns `{{user: InitializedUser}}` An InitializedUser object containing the user's status, wallet, authDetails, and more\n   * @internal\n   */\n  async loginWithEmailOtp(args: Parameters<BaseLogin[\"loginWithEmailOtp\"]>[0]) {\n    await this.preLogin();\n    return this.BaseLogin.loginWithEmailOtp(args);\n  }\n  async authenticateWithEmailOtp(\n    args: Parameters<BaseLogin[\"authenticateWithEmailOtp\"]>[0],\n  ) {\n    return this.BaseLogin.authenticateWithEmailOtp(args);\n  }\n\n  /**\n   * @internal\n   */\n  async loginWithSmsOtp(args: Parameters<BaseLogin[\"loginWithSmsOtp\"]>[0]) {\n    await this.preLogin();\n    return this.BaseLogin.loginWithSmsOtp(args);\n  }\n  async authenticateWithSmsOtp(\n    args: Parameters<BaseLogin[\"authenticateWithSmsOtp\"]>[0],\n  ) {\n    return this.BaseLogin.authenticateWithSmsOtp(args);\n  }\n\n  /**\n   * Logs any existing user out of their wallet.\n   * @returns `{{success: boolean}}` true if a user is successfully logged out. false if there's no user currently logged in.\n   * @internal\n   */\n  async logout(): Promise<LogoutReturnType> {\n    if (this.AuthQuerier) {\n      await this.AuthQuerier.call<LogoutReturnType>({\n        procedureName: \"logout\",\n        params: undefined,\n      });\n    }\n\n    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\n    const isRemoveUserId = await this.localStorage.removeWalletUserId();\n\n    return {\n      success: isRemoveAuthCookie || isRemoveUserId,\n    };\n  }\n}\n","import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../../utils/fetch.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\n\n/**\n * Generate a new enclave wallet using an auth token\n * @internal\n */\nexport async function generateWallet({\n  authToken,\n  client,\n  ecosystem,\n}: {\n  client: ThirdwebClient;\n  ecosystem: Ecosystem;\n  authToken: string;\n}) {\n  const clientFetch = getClientFetch(client, ecosystem);\n  const response = await clientFetch(\n    `${getThirdwebBaseUrl(\"inAppWallet\")}/api/v1/enclave-wallet/generate`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-thirdweb-client-id\": client.clientId,\n        Authorization: `Bearer embedded-wallet-token:${authToken}`,\n      },\n    },\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Failed to generate wallet\");\n  }\n\n  const { wallet } = (await response.json()) as {\n    wallet: {\n      address: string;\n      type: \"enclave\";\n    };\n  };\n\n  return wallet;\n}\n","import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport {\n  getLoginCallbackUrl,\n  getLoginUrl,\n} from \"../../../core/authentication/getLoginPath.js\";\nimport type {\n  AuthStoredTokenWithCookieReturnType,\n  MultiStepAuthArgsType,\n  PreAuthArgsType,\n} from \"../../../core/authentication/types.js\";\nimport type { Ecosystem } from \"../../../core/wallet/types.js\";\n\n/**\n * @internal\n */\nexport const sendOtp = async (args: PreAuthArgsType): Promise<void> => {\n  const { client, ecosystem } = args;\n  const url = getLoginUrl({ client, ecosystem, authOption: args.strategy });\n\n  const headers: Record<string, string> = {\n    \"Content-Type\": \"application/json\",\n    \"x-client-id\": client.clientId,\n  };\n\n  if (ecosystem?.id) {\n    headers[\"x-ecosystem-id\"] = ecosystem.id;\n  }\n\n  if (ecosystem?.partnerId) {\n    headers[\"x-ecosystem-partner-id\"] = ecosystem.partnerId;\n  }\n\n  const body = (() => {\n    switch (args.strategy) {\n      case \"email\":\n        return {\n          email: args.email,\n        };\n      case \"phone\":\n        return {\n          phone: args.phoneNumber,\n        };\n    }\n  })();\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to send verification code\");\n  }\n\n  return await response.json();\n};\n\n/**\n * @internal\n */\nexport const verifyOtp = async (\n  args: MultiStepAuthArgsType & {\n    client: ThirdwebClient;\n    ecosystem?: Ecosystem;\n  },\n): Promise<AuthStoredTokenWithCookieReturnType> => {\n  const { client, ecosystem } = args;\n  const url = getLoginCallbackUrl({\n    authOption: args.strategy,\n    client: args.client,\n    ecosystem: args.ecosystem,\n  });\n\n  const headers: Record<string, string> = {\n    \"Content-Type\": \"application/json\",\n    \"x-client-id\": client.clientId,\n  };\n\n  if (ecosystem?.id) {\n    headers[\"x-ecosystem-id\"] = ecosystem.id;\n  }\n\n  if (ecosystem?.partnerId) {\n    headers[\"x-ecosystem-partner-id\"] = ecosystem.partnerId;\n  }\n\n  const body = (() => {\n    switch (args.strategy) {\n      case \"email\":\n        return {\n          email: args.email,\n          code: args.verificationCode,\n        };\n      case \"phone\":\n        return {\n          phone: args.phoneNumber,\n          code: args.verificationCode,\n        };\n    }\n  })();\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to verify verification code\");\n  }\n\n  return await response.json();\n};\n","import type * as ethers5 from \"ethers5\";\nimport type { TypedDataDefinition } from \"viem\";\nimport { getCachedChain } from \"../../../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { eth_sendRawTransaction } from \"../../../../rpc/actions/eth_sendRawTransaction.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\nimport { getAddress } from \"../../../../utils/address.js\";\nimport { getThirdwebDomains } from \"../../../../utils/domains.js\";\nimport { type Hex, hexToString } from \"../../../../utils/encoding/hex.js\";\nimport { parseTypedData } from \"../../../../utils/signatures/helpers/parseTypedData.js\";\nimport type { Prettify } from \"../../../../utils/type-utils.js\";\nimport type {\n  Account,\n  SendTransactionOption,\n} from \"../../../interfaces/wallet.js\";\nimport type { ClientScopedStorage } from \"../../core/authentication/client-scoped-storage.js\";\nimport type {\n  AuthResultAndRecoveryCode,\n  GetUser,\n  GetUserWalletStatusRpcReturnType,\n} from \"../../core/authentication/types.js\";\nimport type { Ecosystem } from \"../../core/wallet/types.js\";\nimport type { IWebWallet } from \"../../core/wallet/web-wallet.js\";\nimport type {\n  ClientIdWithQuerierType,\n  GetAddressReturnType,\n  SignMessageReturnType,\n  SignTransactionReturnType,\n  SignedTypedDataReturnType,\n} from \"../types.js\";\nimport type { InAppWalletIframeCommunicator } from \"../utils/iFrameCommunication/InAppWalletIframeCommunicator.js\";\n\ntype WalletManagementTypes = {\n  createWallet: undefined;\n  setUpNewDevice: undefined;\n  getUserStatus: undefined;\n};\ntype WalletManagementUiTypes = {\n  createWalletUi: undefined;\n  setUpNewDeviceUi: undefined;\n};\n\ntype SignerProcedureTypes = {\n  getAddress: undefined;\n  signMessage: {\n    message: string | Hex;\n    chainId: number;\n    rpcEndpoint?: string;\n    partnerId?: string;\n  };\n  signTransaction: {\n    transaction: ethers5.ethers.providers.TransactionRequest;\n    chainId: number;\n    rpcEndpoint?: string;\n    partnerId?: string;\n  };\n  signTypedDataV4: {\n    domain: TypedDataDefinition[\"domain\"];\n    types: TypedDataDefinition[\"types\"];\n    message: TypedDataDefinition[\"message\"];\n    chainId: number;\n    rpcEndpoint?: string;\n    partnerId?: string;\n  };\n  //connect: { provider: Provider };\n};\n\n/**\n *\n */\nexport class IFrameWallet implements IWebWallet {\n  public client: ThirdwebClient;\n  public ecosystem?: Ecosystem;\n  protected walletManagerQuerier: InAppWalletIframeCommunicator<\n    WalletManagementTypes & WalletManagementUiTypes\n  >;\n  protected localStorage: ClientScopedStorage;\n\n  /**\n   * Not meant to be initialized directly. Call {@link initializeUser} to get an instance\n   * @internal\n   */\n  constructor({\n    client,\n    ecosystem,\n    querier,\n    localStorage,\n  }: Prettify<\n    ClientIdWithQuerierType & {\n      ecosystem?: Ecosystem;\n      localStorage: ClientScopedStorage;\n    }\n  >) {\n    this.client = client;\n    this.ecosystem = ecosystem;\n    this.walletManagerQuerier = querier;\n    this.localStorage = localStorage;\n  }\n\n  /**\n   * Used to set-up the user device in the case that they are using incognito\n   * @returns `{walletAddress : string }` The user's wallet details\n   * @internal\n   */\n  async postWalletSetUp(authResult: AuthResultAndRecoveryCode): Promise<void> {\n    if (authResult.deviceShareStored) {\n      await this.localStorage.saveDeviceShare(\n        authResult.deviceShareStored,\n        authResult.storedToken.authDetails.userWalletId,\n      );\n    }\n  }\n\n  /**\n   * Gets the various status states of the user\n   * @example\n   * ```typescript\n   *  const userStatus = await Paper.getUserWalletStatus();\n   *  switch (userStatus.status) {\n   *  case UserWalletStatus.LOGGED_OUT: {\n   *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\n   *    // User is logged in, but does not have a wallet associated with it\n   *    // you also have access to the user's details\n   *    userStatus.user.authDetails;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\n   *    // User is logged in and created a wallet already, but is missing the device shard\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *    // user is logged in and wallet is all set up.\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    userStatus.user.wallet;\n   *    break;\n   *  }\n   *}\n   *```\n   * @returns `{GetUserWalletStatusFnReturnType}` an object to containing various information on the user statuses\n   * @internal\n   */\n  async getUserWalletStatus(): Promise<GetUser> {\n    const userStatus =\n      await this.walletManagerQuerier.call<GetUserWalletStatusRpcReturnType>({\n        procedureName: \"getUserStatus\",\n        params: undefined,\n      });\n    if (userStatus.status === \"Logged In, Wallet Initialized\") {\n      return {\n        status: \"Logged In, Wallet Initialized\",\n        ...userStatus.user,\n        account: await this.getAccount(),\n      };\n    }\n    if (userStatus.status === \"Logged In, New Device\") {\n      return {\n        status: \"Logged In, New Device\",\n        ...userStatus.user,\n      };\n    }\n    if (userStatus.status === \"Logged In, Wallet Uninitialized\") {\n      return {\n        status: \"Logged In, Wallet Uninitialized\",\n        ...userStatus.user,\n      };\n    }\n    // Logged out\n    return { status: userStatus.status };\n  }\n\n  /**\n   * Returns an account that communicates with the iFrame for signing operations\n   * @internal\n   */\n  async getAccount(): Promise<Account> {\n    const querier = this\n      .walletManagerQuerier as unknown as InAppWalletIframeCommunicator<SignerProcedureTypes>;\n    const client = this.client;\n    const partnerId = this.ecosystem?.partnerId;\n\n    const { address } = await querier.call<GetAddressReturnType>({\n      procedureName: \"getAddress\",\n      params: undefined,\n    });\n    const _signTransaction = async (tx: SendTransactionOption) => {\n      // biome-ignore lint/suspicious/noExplicitAny: ethers tx transformation\n      const transaction: Record<string, any> = {\n        to: tx.to ?? undefined,\n        data: tx.data,\n        value: tx.value,\n        gasLimit: tx.gas,\n        nonce: tx.nonce,\n        chainId: tx.chainId,\n      };\n\n      if (tx.maxFeePerGas) {\n        // ethers (in the iframe) rejects any type 0 trasaction with unknown keys\n        // TODO remove this once iframe is upgraded to v5\n        transaction.accessList = tx.accessList;\n        transaction.maxFeePerGas = tx.maxFeePerGas;\n        transaction.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n        transaction.type = 2;\n      } else {\n        transaction.gasPrice = tx.gasPrice;\n        transaction.type = 0;\n      }\n      const RPC_URL = getThirdwebDomains().rpc;\n      const { signedTransaction } =\n        await querier.call<SignTransactionReturnType>({\n          procedureName: \"signTransaction\",\n          params: {\n            transaction,\n            chainId: tx.chainId,\n            partnerId,\n            rpcEndpoint: `https://${tx.chainId}.${RPC_URL}`, // TODO (ew) shouldnt be needed\n          },\n        });\n      return signedTransaction as Hex;\n    };\n    return {\n      address: getAddress(address),\n      async signTransaction(tx) {\n        if (!tx.chainId) {\n          throw new Error(\"chainId required in tx to sign\");\n        }\n        return _signTransaction({\n          ...tx,\n          chainId: tx.chainId,\n        });\n      },\n      async sendTransaction(tx) {\n        const rpcRequest = getRpcClient({\n          client,\n          chain: getCachedChain(tx.chainId),\n        });\n        const signedTx = await _signTransaction(tx);\n        const transactionHash = await eth_sendRawTransaction(\n          rpcRequest,\n          signedTx,\n        );\n        return {\n          transactionHash,\n        };\n      },\n      async signMessage({ message }) {\n        // in-app wallets use ethers to sign messages, which always expects a string (or bytes maybe but string is safest)\n        const messageDecoded = (() => {\n          if (typeof message === \"string\") {\n            return message;\n          }\n          if (message.raw instanceof Uint8Array) {\n            return message.raw;\n          }\n          return hexToString(message.raw);\n        })();\n\n        const { signedMessage } = await querier.call<SignMessageReturnType>({\n          procedureName: \"signMessage\",\n          params: {\n            // biome-ignore lint/suspicious/noExplicitAny: ethers tx transformation\n            message: messageDecoded as any, // needs bytes or string\n            partnerId,\n            chainId: 1, // TODO check if we need this\n          },\n        });\n        return signedMessage as Hex;\n      },\n      async signTypedData(_typedData) {\n        const parsedTypedData = parseTypedData(_typedData);\n        // deleting EIP712 Domain as it results in ambiguous primary type on some cases\n        // this happens when going from viem to ethers via the iframe\n        if (parsedTypedData.types?.EIP712Domain) {\n          parsedTypedData.types.EIP712Domain = undefined;\n        }\n        const domain = parsedTypedData.domain as TypedDataDefinition[\"domain\"];\n        const chainId = domain?.chainId;\n        const verifyingContract = domain?.verifyingContract\n          ? { verifyingContract: domain?.verifyingContract }\n          : {};\n        const domainData = {\n          ...verifyingContract,\n          name: domain?.name,\n          version: domain?.version,\n        };\n        // chain id can't be included if it wasn't explicitly specified\n        if (chainId) {\n          (domainData as Record<string, unknown>).chainId = chainId;\n        }\n\n        const RPC_URL = getThirdwebDomains().rpc;\n        const { signedTypedData } =\n          await querier.call<SignedTypedDataReturnType>({\n            procedureName: \"signTypedDataV4\",\n            params: {\n              domain: domainData,\n              types:\n                parsedTypedData.types as SignerProcedureTypes[\"signTypedDataV4\"][\"types\"],\n              message:\n                parsedTypedData.message as SignerProcedureTypes[\"signTypedDataV4\"][\"message\"],\n              chainId: chainId || 1,\n              partnerId,\n              rpcEndpoint: `https://${chainId}.${RPC_URL}`, // TODO (ew) shouldnt be needed\n            },\n          });\n        return signedTypedData as Hex;\n      },\n    };\n  }\n}\n","import type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport type { SocialAuthOption } from \"../../../../wallets/types.js\";\nimport type { Account } from \"../../../interfaces/wallet.js\";\nimport { ClientScopedStorage } from \"../../core/authentication/client-scoped-storage.js\";\nimport { guestAuthenticate } from \"../../core/authentication/guest.js\";\nimport {\n  getLinkedProfilesInternal,\n  linkAccount,\n} from \"../../core/authentication/linkAccount.js\";\nimport {\n  loginWithPasskey,\n  registerPasskey,\n} from \"../../core/authentication/passkeys.js\";\nimport { siweAuthenticate } from \"../../core/authentication/siwe.js\";\nimport type {\n  AuthArgsType,\n  AuthLoginReturnType,\n  AuthStoredTokenWithCookieReturnType,\n  GetUser,\n  LogoutReturnType,\n  MultiStepAuthArgsType,\n  MultiStepAuthProviderType,\n  SingleStepAuthArgsType,\n} from \"../../core/authentication/types.js\";\nimport type { InAppConnector } from \"../../core/interfaces/connector.js\";\nimport { EnclaveWallet } from \"../../core/wallet/enclave-wallet.js\";\nimport type { Ecosystem } from \"../../core/wallet/types.js\";\nimport type { IWebWallet } from \"../../core/wallet/web-wallet.js\";\nimport { getUserStatus } from \"../lib/actions/get-enclave-user-status.js\";\nimport type { InAppWalletConstructorType } from \"../types.js\";\nimport { InAppWalletIframeCommunicator } from \"../utils/iFrameCommunication/InAppWalletIframeCommunicator.js\";\nimport { Auth, type AuthQuerierTypes } from \"./auth/iframe-auth.js\";\nimport { loginWithOauth, loginWithOauthRedirect } from \"./auth/oauth.js\";\nimport { sendOtp, verifyOtp } from \"./auth/otp.js\";\nimport { IFrameWallet } from \"./iframe-wallet.js\";\n\n/**\n * @internal\n */\nexport class InAppWebConnector implements InAppConnector {\n  private client: ThirdwebClient;\n  private ecosystem?: Ecosystem;\n  private querier: InAppWalletIframeCommunicator<AuthQuerierTypes>;\n  private localStorage: ClientScopedStorage;\n\n  private wallet?: IWebWallet;\n  /**\n   * Used to manage the Auth state of the user.\n   */\n  auth: Auth;\n  private passkeyDomain?: string;\n\n  private isClientIdLegacyPaper(clientId: string): boolean {\n    if (clientId.indexOf(\"-\") > 0 && clientId.length === 36) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @example\n   * `const thirdwebInAppWallet = new InAppWalletSdk({ clientId: \"\", chain: \"Goerli\" });`\n   * @internal\n   */\n  constructor({\n    client,\n    onAuthSuccess,\n    ecosystem,\n    passkeyDomain,\n  }: InAppWalletConstructorType) {\n    if (this.isClientIdLegacyPaper(client.clientId)) {\n      throw new Error(\n        \"You are using a legacy clientId. Please use the clientId found on the thirdweb dashboard settings page\",\n      );\n    }\n    const baseUrl = getThirdwebBaseUrl(\"inAppWallet\");\n    this.client = client;\n    this.ecosystem = ecosystem;\n    this.passkeyDomain = passkeyDomain;\n    this.localStorage = new ClientScopedStorage({\n      storage: webLocalStorage,\n      clientId: client.clientId,\n      ecosystemId: ecosystem?.id,\n    });\n    this.querier = new InAppWalletIframeCommunicator({\n      clientId: client.clientId,\n      ecosystem,\n      baseUrl,\n    });\n\n    this.auth = new Auth({\n      client,\n      querier: this.querier,\n      baseUrl,\n      localStorage: this.localStorage,\n      ecosystem,\n      onAuthSuccess: async (authResult) => {\n        onAuthSuccess?.(authResult);\n\n        if (\n          this.ecosystem &&\n          authResult.storedToken.authDetails.walletType === \"sharded\"\n        ) {\n          // If this is an existing sharded ecosystem wallet, we'll need to migrate\n          const result = await this.querier.call<boolean>({\n            procedureName: \"migrateFromShardToEnclave\",\n            params: {\n              storedToken: authResult.storedToken,\n            },\n          });\n          if (!result) {\n            throw new Error(\"Failed to migrate from sharded to enclave wallet\");\n          }\n        }\n\n        await this.initializeWallet(authResult.storedToken.cookieString);\n\n        if (!this.wallet) {\n          throw new Error(\"Failed to initialize wallet\");\n        }\n\n        const deviceShareStored =\n          \"deviceShareStored\" in authResult.walletDetails\n            ? authResult.walletDetails.deviceShareStored\n            : undefined;\n\n        await this.wallet.postWalletSetUp({\n          storedToken: authResult.storedToken,\n          deviceShareStored,\n        });\n\n        if (authResult.storedToken.authDetails.walletType !== \"enclave\") {\n          await this.querier.call({\n            procedureName: \"initIframe\",\n            params: {\n              partnerId: ecosystem?.partnerId,\n              ecosystemId: ecosystem?.id,\n              clientId: this.client.clientId,\n              // For enclave wallets we won't have a device share\n              deviceShareStored:\n                \"deviceShareStored\" in authResult.walletDetails\n                  ? authResult.walletDetails.deviceShareStored\n                  : null,\n              walletUserId: authResult.storedToken.authDetails.userWalletId,\n              authCookie: authResult.storedToken.cookieString,\n            },\n          });\n        }\n\n        return {\n          user: {\n            status: \"Logged In, Wallet Initialized\",\n            authDetails: authResult.storedToken.authDetails,\n            account: await this.wallet.getAccount(),\n            walletAddress: authResult.walletDetails.walletAddress,\n          },\n        };\n      },\n    });\n  }\n\n  async initializeWallet(authToken?: string) {\n    const storedAuthToken = await this.localStorage.getAuthCookie();\n    if (!authToken && storedAuthToken === null) {\n      throw new Error(\n        \"No auth token provided and no stored auth token found to initialize the wallet\",\n      );\n    }\n\n    const user = await getUserStatus({\n      authToken: authToken || (storedAuthToken as string),\n      client: this.client,\n      ecosystem: this.ecosystem,\n    });\n    if (!user) {\n      throw new Error(\"Cannot initialize wallet, no user logged in\");\n    }\n    if (user.wallets.length === 0) {\n      throw new Error(\n        \"Cannot initialize wallet, this user does not have a wallet generated yet\",\n      );\n    }\n\n    if (user.wallets[0].type === \"enclave\") {\n      this.wallet = new EnclaveWallet({\n        client: this.client,\n        ecosystem: this.ecosystem,\n        address: user.wallets[0].address,\n        storage: this.localStorage,\n      });\n      return;\n    }\n\n    this.wallet = new IFrameWallet({\n      client: this.client,\n      ecosystem: this.ecosystem,\n      querier: this.querier,\n      localStorage: this.localStorage,\n    });\n  }\n\n  /**\n   * Gets the user if they're logged in\n   * @example\n   * ```js\n   *  const user = await thirdwebInAppWallet.getUser();\n   *  switch (user.status) {\n   *     case UserWalletStatus.LOGGED_OUT: {\n   *       // User is logged out, call one of the auth methods on thirdwebInAppWallet.auth to authenticate the user\n   *       break;\n   *     }\n   *     case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *       // user is logged in and wallet is all set up.\n   *       // You have access to:\n   *       user.status;\n   *       user.authDetails;\n   *       user.walletAddress;\n   *       user.wallet;\n   *       break;\n   *     }\n   * }\n   * ```\n   * @returns GetUser - an object to containing various information on the user statuses\n   */\n  async getUser(): Promise<GetUser> {\n    // If we don't have a wallet yet we'll create one\n    if (!this.wallet) {\n      const localAuthToken = await this.localStorage.getAuthCookie();\n      if (!localAuthToken) {\n        return { status: \"Logged Out\" };\n      }\n      await this.initializeWallet(localAuthToken);\n    }\n    if (!this.wallet) {\n      throw new Error(\"Wallet not initialized\");\n    }\n    return await this.wallet.getUserWalletStatus();\n  }\n\n  getAccount(): Promise<Account> {\n    if (!this.wallet) {\n      throw new Error(\"Wallet not initialized\");\n    }\n    return this.wallet.getAccount();\n  }\n\n  async preAuthenticate(args: MultiStepAuthProviderType): Promise<void> {\n    return sendOtp({\n      ...args,\n      client: this.client,\n      ecosystem: this.ecosystem,\n    });\n  }\n\n  authenticateWithRedirect(\n    strategy: SocialAuthOption,\n    mode?: \"redirect\" | \"popup\" | \"window\",\n    redirectUrl?: string,\n  ): void {\n    loginWithOauthRedirect({\n      authOption: strategy,\n      client: this.client,\n      ecosystem: this.ecosystem,\n      redirectUrl,\n      mode,\n    });\n  }\n\n  async loginWithAuthToken(authResult: AuthStoredTokenWithCookieReturnType) {\n    return this.auth.loginWithAuthToken(authResult);\n  }\n\n  /**\n   * Authenticates the user and returns the auth token, but does not instantiate their wallet\n   */\n  async authenticate(\n    args: MultiStepAuthArgsType | SingleStepAuthArgsType,\n  ): Promise<AuthStoredTokenWithCookieReturnType> {\n    const strategy = args.strategy;\n    switch (strategy) {\n      case \"email\":\n        return verifyOtp({\n          ...args,\n          client: this.client,\n          ecosystem: this.ecosystem,\n        });\n      case \"phone\":\n        return verifyOtp({\n          ...args,\n          client: this.client,\n          ecosystem: this.ecosystem,\n        });\n      case \"jwt\":\n        return this.auth.authenticateWithCustomJwt({\n          jwt: args.jwt,\n          encryptionKey: args.encryptionKey,\n        });\n      case \"passkey\": {\n        return this.passkeyAuth(args);\n      }\n      case \"auth_endpoint\": {\n        return this.auth.authenticateWithCustomAuthEndpoint({\n          payload: args.payload,\n          encryptionKey: args.encryptionKey,\n        });\n      }\n      case \"iframe_email_verification\": {\n        return this.auth.authenticateWithIframe({\n          email: args.email,\n        });\n      }\n      case \"iframe\": {\n        return this.auth.authenticateWithModal();\n      }\n      case \"apple\":\n      case \"facebook\":\n      case \"google\":\n      case \"telegram\":\n      case \"farcaster\":\n      case \"line\":\n      case \"x\":\n      case \"coinbase\":\n      case \"discord\": {\n        return loginWithOauth({\n          authOption: strategy,\n          client: this.client,\n          ecosystem: this.ecosystem,\n          closeOpenedWindow: args.closeOpenedWindow,\n          openedWindow: args.openedWindow,\n        });\n      }\n      case \"guest\": {\n        return guestAuthenticate({\n          client: this.client,\n          ecosystem: this.ecosystem,\n          storage: webLocalStorage,\n        });\n      }\n      case \"wallet\": {\n        return siweAuthenticate({\n          ecosystem: this.ecosystem,\n          client: this.client,\n          wallet: args.wallet,\n          chain: args.chain,\n        });\n      }\n    }\n  }\n\n  /**\n   * Authenticates the user then instantiates their wallet using the resulting auth token\n   */\n  async connect(\n    args: MultiStepAuthArgsType | SingleStepAuthArgsType,\n  ): Promise<AuthLoginReturnType> {\n    const strategy = args.strategy;\n    switch (strategy) {\n      case \"jwt\": {\n        return this.auth.loginWithCustomJwt({\n          jwt: args.jwt,\n          encryptionKey: args.encryptionKey,\n        });\n      }\n      case \"auth_endpoint\": {\n        return this.auth.loginWithCustomAuthEndpoint({\n          payload: args.payload,\n          encryptionKey: args.encryptionKey,\n        });\n      }\n      case \"iframe_email_verification\": {\n        return this.auth.loginWithIframe({\n          email: args.email,\n        });\n      }\n      case \"iframe\": {\n        return this.auth.loginWithModal();\n      }\n      case \"passkey\": {\n        const authToken = await this.passkeyAuth(args);\n        return this.loginWithAuthToken(authToken);\n      }\n      case \"phone\":\n      case \"email\":\n      case \"wallet\":\n      case \"apple\":\n      case \"facebook\":\n      case \"google\":\n      case \"farcaster\":\n      case \"telegram\":\n      case \"line\":\n      case \"x\":\n      case \"guest\":\n      case \"coinbase\":\n      case \"discord\": {\n        const authToken = await this.authenticate(args);\n        return await this.auth.loginWithAuthToken(authToken);\n      }\n\n      default:\n        assertUnreachable(strategy);\n    }\n  }\n\n  async logout(): Promise<LogoutReturnType> {\n    return await this.auth.logout();\n  }\n\n  private async passkeyAuth(\n    args: Extract<SingleStepAuthArgsType, { strategy: \"passkey\" }>,\n  ) {\n    const { PasskeyWebClient } = await import(\"./auth/passkeys.js\");\n    const passkeyClient = new PasskeyWebClient();\n    const storage = this.localStorage;\n    if (args.type === \"sign-up\") {\n      return registerPasskey({\n        client: this.client,\n        ecosystem: this.ecosystem,\n        username: args.passkeyName,\n        passkeyClient,\n        storage,\n        rp: {\n          id: this.passkeyDomain ?? window.location.hostname,\n          name: this.passkeyDomain ?? window.document.title,\n        },\n      });\n    }\n    return loginWithPasskey({\n      client: this.client,\n      ecosystem: this.ecosystem,\n      passkeyClient,\n      storage,\n      rp: {\n        id: this.passkeyDomain ?? window.location.hostname,\n        name: this.passkeyDomain ?? window.document.title,\n      },\n    });\n  }\n\n  async linkProfile(args: AuthArgsType) {\n    const { storedToken } = await this.authenticate(args);\n    return await linkAccount({\n      client: args.client,\n      tokenToLink: storedToken.cookieString,\n      storage: this.localStorage,\n    });\n  }\n\n  async getProfiles() {\n    return getLinkedProfilesInternal({\n      client: this.client,\n      ecosystem: this.ecosystem,\n      storage: this.localStorage,\n    });\n  }\n}\n\nfunction assertUnreachable(x: never, message?: string): never {\n  throw new Error(message ?? `Invalid param: ${x}`);\n}\n","import type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\nimport { randomBytesHex } from \"../../../../utils/random.js\";\nimport type { AsyncStorage } from \"../../../../utils/storage/AsyncStorage.js\";\nimport type { Ecosystem } from \"../wallet/types.js\";\nimport { ClientScopedStorage } from \"./client-scoped-storage.js\";\nimport { getLoginCallbackUrl } from \"./getLoginPath.js\";\nimport type { AuthStoredTokenWithCookieReturnType } from \"./types.js\";\n\n/**\n * Does no real authentication, just issues a temporary token for the user.\n * @internal\n */\nexport async function guestAuthenticate(args: {\n  client: ThirdwebClient;\n  storage: AsyncStorage;\n  ecosystem?: Ecosystem;\n}): Promise<AuthStoredTokenWithCookieReturnType> {\n  const storage = new ClientScopedStorage({\n    storage: args.storage,\n    clientId: args.client.clientId,\n    ecosystemId: args.ecosystem?.id,\n  });\n\n  let sessionId = await storage.getGuestSessionId();\n  if (!sessionId) {\n    sessionId = randomBytesHex(32);\n    storage.saveGuestSessionId(sessionId);\n  }\n\n  const clientFetch = getClientFetch(args.client, args.ecosystem);\n  const authResult = await (async () => {\n    const path = getLoginCallbackUrl({\n      authOption: \"guest\",\n      client: args.client,\n      ecosystem: args.ecosystem,\n    });\n    const res = await clientFetch(`${path}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        sessionId,\n      }),\n    });\n\n    if (!res.ok) throw new Error(\"Failed to generate guest account\");\n\n    return (await res.json()) satisfies AuthStoredTokenWithCookieReturnType;\n  })();\n  return authResult;\n}\n","import { signLoginPayload } from \"../../../../auth/core/sign-login-payload.js\";\nimport type { LoginPayload } from \"../../../../auth/core/types.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\nimport type { Wallet } from \"../../../interfaces/wallet.js\";\nimport type { Ecosystem } from \"../wallet/types.js\";\nimport { getLoginCallbackUrl, getLoginUrl } from \"./getLoginPath.js\";\nimport type { AuthStoredTokenWithCookieReturnType } from \"./types.js\";\n\n/**\n * @internal\n */\nexport async function siweAuthenticate(args: {\n  wallet: Wallet;\n  chain: Chain;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n}): Promise<AuthStoredTokenWithCookieReturnType> {\n  const { wallet, chain } = args;\n  const account = await wallet.connect({ client: args.client });\n  const clientFetch = getClientFetch(args.client, args.ecosystem);\n\n  const payload = await (async () => {\n    const path = getLoginUrl({\n      authOption: \"wallet\",\n      client: args.client,\n      ecosystem: args.ecosystem,\n    });\n    const res = await clientFetch(\n      `${path}&address=${account.address}&chainId=${chain.id}`,\n    );\n\n    if (!res.ok) throw new Error(\"Failed to generate SIWE login payload\");\n\n    return (await res.json()) satisfies LoginPayload;\n  })();\n  const { signature } = await signLoginPayload({ payload, account });\n\n  const authResult = await (async () => {\n    const path = getLoginCallbackUrl({\n      authOption: \"wallet\",\n      client: args.client,\n      ecosystem: args.ecosystem,\n    });\n    const res = await clientFetch(\n      `${path}&signature=${signature}&payload=${encodeURIComponent(payload)}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          signature,\n          payload,\n        }),\n      },\n    );\n\n    if (!res.ok) throw new Error(\"Failed to verify SIWE signature\");\n\n    return (await res.json()) satisfies AuthStoredTokenWithCookieReturnType;\n  })();\n  return authResult;\n}\n","import type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\nimport type { Ecosystem } from \"../wallet/types.js\";\nimport type { ClientScopedStorage } from \"./client-scoped-storage.js\";\nimport type { Profile } from \"./types.js\";\n\n/**\n * @description\n * Links a new account to the current one using an auth token.\n * For the public-facing API, use `wallet.linkProfile` instead.\n *\n * @internal\n */\nexport async function linkAccount({\n  client,\n  ecosystem,\n  tokenToLink,\n  storage,\n}: {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  tokenToLink: string;\n  storage: ClientScopedStorage;\n}): Promise<Profile[]> {\n  const clientFetch = getClientFetch(client, ecosystem);\n  const IN_APP_URL = getThirdwebBaseUrl(\"inAppWallet\");\n  const currentAccountToken = await storage.getAuthCookie();\n\n  if (!currentAccountToken) {\n    throw new Error(\"Failed to link account, no user logged in\");\n  }\n\n  const headers: Record<string, string> = {\n    Authorization: `Bearer iaw-auth-token:${currentAccountToken}`,\n    \"Content-Type\": \"application/json\",\n  };\n  const linkedDetailsResp = await clientFetch(\n    `${IN_APP_URL}/api/2024-05-05/account/connect`,\n    {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        accountAuthTokenToConnect: tokenToLink,\n      }),\n    },\n  );\n\n  if (!linkedDetailsResp.ok) {\n    const body = await linkedDetailsResp.json();\n    throw new Error(body.message || \"Failed to link account.\");\n  }\n\n  const { linkedAccounts } = await linkedDetailsResp.json();\n\n  return (linkedAccounts ?? []) satisfies Profile[];\n}\n\n/**\n * @description\n * Gets the linked accounts for the current user.\n * For the public-facing API, use `wallet.getProfiles` instead.\n *\n * @internal\n */\nexport async function getLinkedProfilesInternal({\n  client,\n  ecosystem,\n  storage,\n}: {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  storage: ClientScopedStorage;\n}): Promise<Profile[]> {\n  const clientFetch = getClientFetch(client, ecosystem);\n  const IN_APP_URL = getThirdwebBaseUrl(\"inAppWallet\");\n  const currentAccountToken = await storage.getAuthCookie();\n  if (!currentAccountToken) {\n    throw new Error(\"Failed to get linked accounts, no user logged in\");\n  }\n\n  const headers: Record<string, string> = {\n    Authorization: `Bearer iaw-auth-token:${currentAccountToken}`,\n    \"Content-Type\": \"application/json\",\n  };\n\n  const linkedAccountsResp = await clientFetch(\n    `${IN_APP_URL}/api/2024-05-05/accounts`,\n    {\n      method: \"GET\",\n      headers,\n    },\n  );\n\n  if (!linkedAccountsResp.ok) {\n    const body = await linkedAccountsResp.json();\n    throw new Error(body.message || \"Failed to get linked accounts.\");\n  }\n\n  const { linkedAccounts } = await linkedAccountsResp.json();\n\n  return (linkedAccounts ?? []) satisfies Profile[];\n}\n"],"names":["createLoginMessage","payload","prefix","domain","address","join","statement","suffixArray","uri","uriField","push","versionField","version","chain_id","chainField","nonceField","nonce","issuedAtField","issued_at","expiryField","expiration_time","invalid_before","invalidBeforeField","resources","map","x","async","signLoginPayload","options","account","signature","signMessage","message","eth_sendRawTransaction","request","signedTransaction","method","params","randomBytesHex","length","arguments","undefined","uint8ArrayToHex","globalThis","crypto","getRandomValues","Uint8Array","randomBytesBuffer","getVerificationPath","getThirdwebBaseUrl","getChallengePath","type","username","registerPasskey","passkeyClient","isAvailable","Error","fetchWithId","getClientFetch","client","ecosystem","generatedName","id","Date","toISOString","res","challengeData","json","challenge","registration","register","name","rp","customHeaders","partnerId","verifRes","headers","body","JSON","stringify","authenticatorData","credentialId","serverVerificationId","clientData","credential","publicKey","algorithm","origin","rpId","verifData","storedToken","storage","savePasskeyCredentialId","getUserStatus","_ref","authToken","clientFetch","response","clientId","Authorization","ok","console","log","status","result","error","EnclaveWallet","constructor","Object","defineProperty","this","localStorage","postWalletSetUp","authResult","saveAuthCookie","cookieString","getUserWalletStatus","token","getAuthCookie","userStatus","wallet","wallets","authDetails","email","linkedAccounts","find","details","phoneNumber","phone","userWalletId","recoveryShareManagement","walletAddress","getAccount","_signTransaction","rpcRequest","getRpcClient","chain","getCachedChain","tx","chainId","transaction","to","data","toHex","value","gas","BigInt","then","_ref2","eth_getTransactionCount","blockTag","maxFeePerGas","maxPriorityFeePerGas","gasPrice","transactionPayload","signEnclaveTransaction","getAddress","signTransaction","sendTransaction","signedTx","transactionHash","_ref3","messagePayload","isRaw","raw","bytesToHex","signEnclaveMessage","signTypedData","_typedData","parsedTypedData","parseTypedData","signEnclaveTypedData","sleep","seconds","Promise","resolve","setTimeout","iframeBaseStyle","height","width","border","backgroundColor","colorScheme","position","top","right","zIndex","display","pointerEvents","isIframeLoaded","Map","IframeCommunicator","link","baseUrl","iframeId","container","document","onIframeInitialize","iframeBaseUrl","iframe","getElementById","hrefLink","URL","src","href","createElement","mergedIframeStyles","assign","style","setAttribute","appendChild","onIframeLoaded","event","eventType","window","removeEventListener","warn","onIframeLoadHandler","addEventListener","onIframeLoadedInitVariables","channel","MessageChannel","promise","rej","port1","onmessage","close","success","set","contentWindow","postMessage","port2","call","procedureName","showIframe","get","POLLING_INTERVAL_SECONDS","destroy","delete","InAppWalletIframeCommunicator","super","IN_APP_WALLET_IFRAME_ID","createInAppWalletIframeLink","path","IN_APP_WALLET_PATH","ClientScopedStorage","webLocalStorage","ecosystemId","authCookie","deviceShareStored","getDeviceShare","walletUserId","getWalletUserId","queryParams","inAppWalletUrl","queryKey","keys","searchParams","toString","AbstractLogin","querier","preLogin","postLogin","LoginQuerier","sendEmailLoginOtp","sendSmsLoginOtp","BaseLogin","authenticateWithModal","loginWithModal","authenticateWithIframe","loginWithIframe","authenticateWithCustomJwt","encryptionKey","jwt","loginWithCustomJwt","_ref4","authenticateWithCustomAuthEndpoint","_ref5","loginWithCustomAuthEndpoint","_ref6","authenticateWithEmailOtp","_ref7","otp","recoveryCode","loginWithEmailOtp","_ref8","authenticateWithSmsOtp","_ref9","loginWithSmsOtp","_ref10","Auth","onAuthSuccess","AuthQuerier","logout","walletDetails","shouldStoreCookieString","loginWithAuthToken","user","generateWallet","args","isRemoveAuthCookie","removeAuthCookie","isRemoveUserId","removeWalletUserId","verifyOtp","url","getLoginCallbackUrl","authOption","strategy","code","verificationCode","fetch","IFrameWallet","walletManagerQuerier","saveDeviceShare","gasLimit","accessList","RPC_URL","getThirdwebDomains","rpc","rpcEndpoint","messageDecoded","hexToString","signedMessage","types","EIP712Domain","domainData","verifyingContract","signedTypedData","InAppWebConnector","isClientIdLegacyPaper","indexOf","passkeyDomain","auth","walletType","initializeWallet","storedAuthToken","getUser","localAuthToken","preAuthenticate","getLoginUrl","sendOtp","authenticateWithRedirect","mode","redirectUrl","loginWithOauthRedirect","authenticate","passkeyAuth","loginWithOauth","closeOpenedWindow","openedWindow","sessionId","getGuestSessionId","saveGuestSessionId","guestAuthenticate","connect","encodeURIComponent","siweAuthenticate","assertUnreachable","PasskeyWebClient","passkeyName","location","hostname","title","getPasskeyCredentialId","authentication","loginWithPasskey","linkProfile","tokenToLink","IN_APP_URL","currentAccountToken","linkedDetailsResp","accountAuthTokenToConnect","linkAccount","getProfiles","linkedAccountsResp","getLinkedProfilesInternal"],"sourceRoot":""}